{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Colors","require","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkSpaceKey","e","keyCode","setColor","colors","state","quotes","color","Math","floor","random","length","quote","compColor","complement","setState","activeColor","activeQuote","isQuoteActive","author","bind","assertThisInitialized","document","addEventListener","removeEventListener","title","react_default","a","createElement","className","style","background","concat","id","onClick","border","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca56cca3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nconst Colors = require('colors.js');\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      colors: [ \"#ffb3ba\", \"#ffdfba\", \"\t#ffffba\", \"\t#baffc9\", \r\n                  \"#bae1ff\", \"#6b3e26\", \"#ffc5d9\", \"#c2f2d0\",\r\n                  \"#fdf5c9\", \"#ffcb85\", \"#e5c3c6\", \"#e1e9b7\",\r\n                  \"#f96161\", \"#bcd2d0\", \"#d0b783\"\r\n              ],\r\n      quotes: [ {quote: 'The truly rich are those who enjoy what they have.', author: 'Yiddish Proverb'},\r\n                {quote: 'Every person is a book, each year a chapter.', author: 'Mark Twain'},\r\n                {quote: 'Your worth consists in what you are and not in what you have.', author: 'Thomas Edison'},\r\n                {quote: 'I have no special talents. I am only passionately curious.', author: 'Albert Einstein'},\r\n                {quote: \"The stars are a free show; it don't cost anything to use your eyes\", author: 'George Orwell'},\r\n                {quote: 'Your big opportunity may be right where you are now.', author: 'Napoleon'},\r\n                {quote: \"It's not because things are difficult that we dare not venture. It's because we dare not venture that they are difficult.\", author: 'Senecca'},\r\n                {quote: 'If you cannot do great things, do small things in a great way.', author: 'Napoleon'},\r\n                {quote: 'The key to life is accepting challenges. Once someone stops doing this, heâ€™s dead.', author: 'Bette Davis'},\r\n                {quote: 'Energy and persistence conquer all things.', author: 'Benjamin Franklin'}\r\n              ],\r\n      activeColor: '#333333',\r\n      compColor: '#FFFFFF',\r\n      isQuoteActive: false,\r\n      activeQuote: ''\r\n    }\r\n\r\n    this.checkSpaceKey = this.checkSpaceKey.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.checkSpaceKey)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.checkSpaceKey)\r\n  }\r\n\r\n  checkSpaceKey = e => {\r\n    if (e.keyCode === 32) {\r\n      this.setColor();\r\n    }\r\n  }\r\n\r\n  setColor = () => {\r\n    const colors = this.state.colors;\r\n    const quotes = this.state.quotes;\r\n    const color = colors[Math.floor(Math.random()* colors.length)];\r\n    const quote = quotes[Math.floor(Math.random()* quotes.length)];\r\n    const compColor = Colors.complement(color);\r\n    this.setState({ \r\n      activeColor: color,\r\n      activeQuote: quote,\r\n      isQuoteActive: true,\r\n      compColor: compColor\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    const isQuoteActive = this.state.isQuoteActive;\r\n    let title;\r\n    let author;\r\n\r\n    if (isQuoteActive) {\r\n      title = this.state.activeQuote.quote;\r\n      author = this.state.activeQuote.author;\r\n    } else {\r\n      title = 'Be Inspired';\r\n      author = 'Your inner child'\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\" style={{ background: `${this.state.activeColor}` }}>\r\n        <section className=\"main\" id=\"quote-box\">\r\n          <div className=\"quote\">\r\n            <blockquote className=\"quote--quote\" id=\"text\" style={{ color: `${this.state.compColor}` }}>{title}</blockquote>\r\n            <cite className=\"quote--author\" id=\"author\" style={{ color: `${this.state.compColor}` }}>{author}</cite>\r\n          </div>\r\n            <button className=\"btn\"  id=\"new-quote\" onClick={this.setColor} style={{ border:`2px solid ${this.state.compColor}`, color: `${this.state.compColor}`}}>\r\n              Inspire Me\r\n            </button>\r\n            <a className=\"quote--tweet\" id=\"tweet-quote\"\r\n              style={{ color: `${this.state.compColor}` }} \r\n              href={`https://twitter.com/intent/tweet?text=${this.state.activeQuote.quote}`}>Tweet this</a>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}